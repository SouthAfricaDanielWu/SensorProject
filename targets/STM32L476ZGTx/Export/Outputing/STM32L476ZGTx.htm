<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Export\Outputing\STM32L476ZGTx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Export\Outputing\STM32L476ZGTx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Nov 09 16:19:41 2020
<BR><P>
<H3>Maximum Stack Usage =       3464 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
pack_sha256_rsa2048_check &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[fb]">LOS_StartToRun</a>
 <LI><a href="#[bd]">LOS_IntLock</a>
 <LI><a href="#[227]">LOS_IntUnLock</a>
 <LI><a href="#[be]">LOS_IntRestore</a>
 <LI><a href="#[f1]">osTaskSchedule</a>
 <LI><a href="#[2]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">OC_cmd_match</a> from nb_cmd_ioctl.o(i.OC_cmd_match) referenced from nb_demo.o(i.demo_nbiot_only)
 <LI><a href="#[2]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced 2 times from los_hwi.o(.data.vector)
 <LI><a href="#[0]">Reset_Handler</a> from los_startup_keil.o(RESET) referenced 2 times from los_hwi.o(.data.vector)
 <LI><a href="#[0]">Reset_Handler</a> from los_startup_keil.o(RESET) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[19]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[1a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from los_startup_keil.o(RESET)
 <LI><a href="#[1d]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[1e]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1c]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[23]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[23]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[24]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[13]">at_cmd</a> from at_main.o(i.at_cmd) referenced 2 times from at_main.o(.data)
 <LI><a href="#[18]">at_cmd_multi_suffix</a> from at_main.o(i.at_cmd_multi_suffix) referenced 2 times from at_main.o(.data)
 <LI><a href="#[17]">at_deinit</a> from at_main.o(i.at_deinit) referenced 2 times from at_main.o(.data)
 <LI><a href="#[55]">at_free</a> from at_main.o(i.at_free) referenced from sota_demo.o(.constdata)
 <LI><a href="#[15]">at_get_unuse_linkid</a> from at_main.o(i.at_get_unuse_linkid) referenced 2 times from at_main.o(.data)
 <LI><a href="#[12]">at_init</a> from at_main.o(i.at_init) referenced 2 times from at_main.o(.data)
 <LI><a href="#[25]">at_irq_handler</a> from at_hal.o(i.at_irq_handler) referenced from at_hal.o(i.at_usart_init)
 <LI><a href="#[54]">at_malloc</a> from at_main.o(i.at_malloc) referenced from sota_demo.o(.constdata)
 <LI><a href="#[16]">at_oob_register</a> from at_main.o(i.at_oob_register) referenced 2 times from at_main.o(.data)
 <LI><a href="#[2a]">at_recv_task</a> from at_main.o(i.at_recv_task) referenced from at_main.o(i.create_at_recv_task)
 <LI><a href="#[14]">at_write</a> from at_main.o(i.at_write) referenced 2 times from at_main.o(.data)
 <LI><a href="#[26]">atiny_task_entry</a> from user_task.o(i.atiny_task_entry) referenced from user_task.o(i.creat_agenttiny_task)
 <LI><a href="#[e]">calloc</a> from malloc.o(i.calloc) referenced 2 times from platform.o(.data)
 <LI><a href="#[27]">data_collection_task</a> from nb_demo.o(i.data_collection_task) referenced from nb_demo.o(i.creat_data_collection_task)
 <LI><a href="#[28]">data_report_task</a> from nb_demo.o(i.data_report_task) referenced from nb_demo.o(i.creat_data_report_task)
 <LI><a href="#[22]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[f]">free</a> from malloc.o(i.free) referenced 2 times from platform.o(.data)
 <LI><a href="#[46]">func_flag_read</a> from sota.o(i.func_flag_read) referenced from sota.o(i.sota_init)
 <LI><a href="#[47]">func_flag_write</a> from sota.o(i.func_flag_write) referenced from sota.o(i.sota_init)
 <LI><a href="#[2d]">hal_read_flash</a> from ota_port.o(i.hal_read_flash) referenced from ota_port.o(i.hal_get_ota_opt)
 <LI><a href="#[2e]">hal_write_flash</a> from ota_port.o(i.hal_write_flash) referenced from ota_port.o(i.hal_get_ota_opt)
 <LI><a href="#[1f]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3d]">local_calloc</a> from package.o(i.local_calloc) referenced from package.o(i.pack_init_device)
 <LI><a href="#[1b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">nb_bind</a> from bc95.o(i.nb_bind) referenced 2 times from bc95.o(.data)
 <LI><a href="#[b]">nb_close</a> from bc95.o(i.nb_close) referenced 2 times from bc95.o(.data)
 <LI><a href="#[2c]">nb_cmd_data_ioctl</a> from nb_cmd_ioctl.o(i.nb_cmd_data_ioctl) referenced from nb_demo.o(i.demo_nbiot_only)
 <LI><a href="#[5]">nb_connect</a> from bc95.o(i.nb_connect) referenced 2 times from bc95.o(.data)
 <LI><a href="#[d]">nb_deinit</a> from bc95.o(i.nb_deinit) referenced 2 times from bc95.o(.data)
 <LI><a href="#[2f]">nb_handle_sock_data</a> from bc95.o(i.nb_handle_sock_data) referenced from bc95.o(i.nb_cmd_rcv_data)
 <LI><a href="#[3]">nb_init</a> from bc95.o(i.nb_init) referenced 2 times from bc95.o(.data)
 <LI><a href="#[9]">nb_recv</a> from bc95.o(i.nb_recv) referenced 2 times from bc95.o(.data)
 <LI><a href="#[c]">nb_recv_cb</a> from bc95.o(i.nb_recv_cb) referenced 2 times from bc95.o(.data)
 <LI><a href="#[8]">nb_recv_timeout</a> from bc95.o(i.nb_recv_timeout) referenced 2 times from bc95.o(.data)
 <LI><a href="#[a]">nb_recvfrom</a> from bc95.o(i.nb_recvfrom) referenced 2 times from bc95.o(.data)
 <LI><a href="#[29]">nb_reply_task</a> from nb_demo.o(i.nb_reply_task) referenced from nb_demo.o(i.creat_nb_reply_task)
 <LI><a href="#[6]">nb_send</a> from bc95.o(i.nb_send) referenced 2 times from bc95.o(.data)
 <LI><a href="#[53]">nb_send_str</a> from bc95.o(i.nb_send_str) referenced from sota_demo.o(.constdata)
 <LI><a href="#[7]">nb_sendto</a> from bc95.o(i.nb_sendto) referenced 2 times from bc95.o(.data)
 <LI><a href="#[30]">nb_step</a> from bc95.o(i.nb_step) referenced from bc95.o(i.nb_init)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced 16 times from los_hwi.o(.data.vector)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.LOS_HwiCreate)
 <LI><a href="#[1]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.osHwiInit)
 <LI><a href="#[21]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.LOS_TaskCreateOnly)
 <LI><a href="#[21]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.osIdleTaskCreate)
 <LI><a href="#[20]">osInterrupt</a> from los_hwi.o(i.osInterrupt) referenced from los_hwi.o(i.LOS_HwiCreate)
 <LI><a href="#[20]">osInterrupt</a> from los_hwi.o(i.osInterrupt) referenced from los_hw_tick.o(i.osTickStart)
 <LI><a href="#[34]">osSwTmrTask</a> from los_swtmr.o(i.osSwTmrTask) referenced from los_swtmr.o(i.osSwTmrTaskCreate)
 <LI><a href="#[38]">osTaskEntry</a> from los_task.o(i.osTaskEntry) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[37]">osTaskExit</a> from los_hw.o(i.osTaskExit) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[35]">osTaskSwitchCheck</a> from los_task.o(i.osTaskSwitchCheck) referenced from los_task.o(i.osTaskMonInit)
 <LI><a href="#[36]">osTickHandler</a> from los_tick.o(i.osTickHandler) referenced from los_hw_tick.o(i.osTickStart)
 <LI><a href="#[3c]">pack_get_block_size</a> from package.o(i.pack_get_block_size) referenced from package.o(i.pack_init_device)
 <LI><a href="#[58]">pack_head_handle_bin_type_tlv</a> from package_head.o(i.pack_head_handle_bin_type_tlv) referenced from package_head.o(.constdata)
 <LI><a href="#[57]">pack_head_handle_checksum_tlv</a> from package_head.o(i.pack_head_handle_checksum_tlv) referenced from package_head.o(.constdata)
 <LI><a href="#[39]">pack_read_software</a> from package.o(i.pack_read_software) referenced from package.o(i.pack_init_device)
 <LI><a href="#[3b]">pack_set_flash_type</a> from package.o(i.pack_set_flash_type) referenced from package.o(i.pack_init_device)
 <LI><a href="#[43]">pack_sha256_check</a> from package_checksum.o(i.pack_sha256_check) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[44]">pack_sha256_destroy</a> from package_checksum.o(i.pack_sha256_destroy) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[41]">pack_sha256_reset</a> from package_checksum.o(i.pack_sha256_reset) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[45]">pack_sha256_rsa2048_check</a> from package_checksum.o(i.pack_sha256_rsa2048_check) referenced from package_checksum.o(i.pack_sha256_rsa2048_init)
 <LI><a href="#[42]">pack_sha256_update</a> from package_checksum.o(i.pack_sha256_update) referenced from package_checksum.o(i.pack_sha256_init)
 <LI><a href="#[40]">pack_storage_active_software</a> from package.o(i.pack_storage_active_software) referenced from package.o(i.pack_init_pack_device)
 <LI><a href="#[3e]">pack_storage_write_software</a> from package.o(i.pack_storage_write_software) referenced from package.o(i.pack_init_pack_device)
 <LI><a href="#[3f]">pack_storage_write_software_end</a> from package.o(i.pack_storage_write_software_end) referenced from package.o(i.pack_init_pack_device)
 <LI><a href="#[3a]">pack_write_software</a> from package.o(i.pack_write_software) referenced from package.o(i.pack_init_device)
 <LI><a href="#[11]">printf</a> from printfa.o(i.__0printf) referenced 2 times from platform.o(.data)
 <LI><a href="#[52]">read_ver</a> from sota_demo.o(i.read_ver) referenced from sota_demo.o(.constdata)
 <LI><a href="#[4e]">sha224_clone_wrap</a> from md_wrap.o(i.sha224_clone_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[4c]">sha224_ctx_alloc</a> from md_wrap.o(i.sha224_ctx_alloc) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[4d]">sha224_ctx_free</a> from md_wrap.o(i.sha224_ctx_free) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[4a]">sha224_finish_wrap</a> from md_wrap.o(i.sha224_finish_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[4f]">sha224_process_wrap</a> from md_wrap.o(i.sha224_process_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[48]">sha224_starts_wrap</a> from md_wrap.o(i.sha224_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[49]">sha224_update_wrap</a> from md_wrap.o(i.sha224_update_wrap) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[4b]">sha224_wrap</a> from md_wrap.o(i.sha224_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[50]">sha256_starts_wrap</a> from md_wrap.o(i.sha256_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[51]">sha256_wrap</a> from md_wrap.o(i.sha256_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[10]">snprintf</a> from printfa.o(i.__0snprintf) referenced 2 times from platform.o(.data)
 <LI><a href="#[33]">sota_callback</a> from sota_demo.o(i.sota_callback) referenced from sota_demo.o(i.nb_sota_demo)
 <LI><a href="#[32]">sota_cmd_match</a> from sota_demo.o(i.sota_cmd_match) referenced from sota_demo.o(i.nb_sota_demo)
 <LI><a href="#[56]">sota_log</a> from sota_demo.o(i.sota_log) referenced from sota_demo.o(.constdata)
 <LI><a href="#[31]">sota_timeout_handler</a> from sota.o(i.sota_timeout_handler) referenced from sota_demo.o(i.nb_sota_demo)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_startup_keil.o(RESET))
<BR>[Address Reference Count : 2]<UL><LI> los_startup_keil.o(RESET)
<LI> los_hwi.o(.data.vector)
</UL>
<P><STRONG><a name="[1a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> los_startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[221]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry3.o(.ARM.Collect$$$$00000002))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[72]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[222]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[223]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[224]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[225]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[226]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[fb]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[bd]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[227]"></a>LOS_IntUnLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[f1]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[2]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> los_hwi.o(.data.vector)
</UL>
<P><STRONG><a name="[5b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[228]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStrToStr
</UL>

<P><STRONG><a name="[229]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_reset_record_info
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_resp_buf
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_oob_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_config
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sota_demo
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_str
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_calloc
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_reply_task
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_report_task
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_parse
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_set_cdpserver
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_with_2_suffix
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init_oob
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_log
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[114]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_handle_sock_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC_cmd_match
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_parse
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd_match
</UL>

<P><STRONG><a name="[1c4]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_connect
</UL>

<P><STRONG><a name="[13b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_set_no_encrypt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_set_cdpserver
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_str
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_psk
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_query_ip
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_netstat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_check_csq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_oob_register
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_reply_task
</UL>

<P><STRONG><a name="[1c2]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
</UL>

<P><STRONG><a name="[1b1]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_check
</UL>

<P><STRONG><a name="[21d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_new_ver_process
</UL>

<P><STRONG><a name="[61]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_is_addr_valid
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
</UL>

<P><STRONG><a name="[63]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[74]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>

<P><STRONG><a name="[230]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[231]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[62]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[1c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[232]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[233]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[66]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[234]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[235]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[73]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[236]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>Convert_BH1750</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, e53_ia1.o(i.Convert_BH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Convert_BH1750 &rArr; Start_BH1750 &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_BH1750
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_IA1_Read_Data
</UL>

<P><STRONG><a name="[79]"></a>E53_IA1_Read_Data</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, e53_ia1.o(i.E53_IA1_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = E53_IA1_Read_Data &rArr; Convert_BH1750 &rArr; Start_BH1750 &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_CheckCrc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_CalcTemperatureC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_CalcRH
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_collection_task
</UL>

<P><STRONG><a name="[91]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
</UL>

<P><STRONG><a name="[77]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>

<P><STRONG><a name="[87]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Light
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Light
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
</UL>

<P><STRONG><a name="[7e]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_init.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[112]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[80]"></a>HAL_I2C_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[78]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_IA1_Read_Data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>

<P><STRONG><a name="[7a]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_BH1750
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SHT30
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BH1750
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_IA1_Read_Data
</UL>

<P><STRONG><a name="[81]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[88]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[8a]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[8b]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[8d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[89]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reboot
</UL>

<P><STRONG><a name="[11a]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[118]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[119]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[90]"></a>HAL_QSPI_Abort</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>

<P><STRONG><a name="[93]"></a>HAL_QSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>

<P><STRONG><a name="[95]"></a>HAL_QSPI_Init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_config
</UL>

<P><STRONG><a name="[96]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hal_qspi_flash.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>

<P><STRONG><a name="[97]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_QSPI_Transmit &rArr; HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1230 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1562 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8c]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a4]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
</UL>

<P><STRONG><a name="[ac]"></a>HardWare_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.HardWare_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HardWare_Init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[213]"></a>HexStrToByte</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, sota_hal.o(i.HexStrToByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HexStrToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_parse
</UL>

<P><STRONG><a name="[b1]"></a>HexStrToStr</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bc95.o(i.HexStrToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HexStrToStr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
</UL>

<P><STRONG><a name="[b5]"></a>Init_BH1750</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, e53_ia1.o(i.Init_BH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init_BH1750 &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_IA1
</UL>

<P><STRONG><a name="[b6]"></a>Init_E53_IA1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, e53_ia1.o(i.Init_E53_IA1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Init_E53_IA1 &rArr; Init_SHT30 &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SHT30
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Light
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BH1750
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_collection_task
</UL>

<P><STRONG><a name="[ba]"></a>Init_Light</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, e53_ia1.o(i.Init_Light))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_Light &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_IA1
</UL>

<P><STRONG><a name="[b9]"></a>Init_Motor</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, e53_ia1.o(i.Init_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_Motor &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_IA1
</UL>

<P><STRONG><a name="[b8]"></a>Init_SHT30</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, e53_ia1.o(i.Init_SHT30))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init_SHT30 &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_IA1
</UL>

<P><STRONG><a name="[105]"></a>LOS_Align</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_misc.o(i.LOS_Align))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[dc]"></a>LOS_ErrHandle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, los_err.o(i.LOS_ErrHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[bc]"></a>LOS_HwiCreate</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, los_hwi.o(i.LOS_HwiCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_HwiCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
</UL>

<P><STRONG><a name="[bf]"></a>LOS_KernelInit</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, los_init.o(i.LOS_KernelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRegister
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>LOS_MemAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d1]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemAllocAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[d3]"></a>LOS_MemFree</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, los_memory.o(i.LOS_MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[d6]"></a>LOS_MemInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, los_memory.o(i.LOS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
</UL>

<P><STRONG><a name="[d9]"></a>LOS_MuxCreate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_MuxCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
</UL>

<P><STRONG><a name="[dd]"></a>LOS_MuxDelete</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_MuxDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[df]"></a>LOS_MuxPend</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
</UL>

<P><STRONG><a name="[e4]"></a>LOS_MuxPost</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPost &rArr; osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
</UL>

<P><STRONG><a name="[e6]"></a>LOS_QueueCreate</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, los_queue.o(i.LOS_QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
</UL>

<P><STRONG><a name="[e9]"></a>LOS_QueueDelete</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, los_queue.o(i.LOS_QueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LOS_QueueDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[eb]"></a>LOS_QueueReadCopy</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_queue.o(i.LOS_QueueReadCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[ee]"></a>LOS_QueueWriteCopy</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_queue.o(i.LOS_QueueWriteCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[e3]"></a>LOS_Schedule</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, los_hw.o(i.LOS_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
</UL>

<P><STRONG><a name="[f2]"></a>LOS_SemCreate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, los_sem.o(i.LOS_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_SemCreate &rArr; osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_iot_entry
</UL>

<P><STRONG><a name="[f4]"></a>LOS_SemDelete</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, los_sem.o(i.LOS_SemDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_SemDelete &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[f7]"></a>LOS_SemPend</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, los_sem.o(i.LOS_SemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_SemPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_reply_task
</UL>

<P><STRONG><a name="[f8]"></a>LOS_SemPost</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, los_sem.o(i.LOS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_SemPost &rArr; osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
</UL>

<P><STRONG><a name="[f9]"></a>LOS_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, los_init.o(i.LOS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_Start &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>LOS_SwtmrCreate</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, los_swtmr.o(i.LOS_SwtmrCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sota_demo
</UL>

<P><STRONG><a name="[fd]"></a>LOS_SwtmrStart</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, los_swtmr.o(i.LOS_SwtmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrStart &rArr; osSwTmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_callback
</UL>

<P><STRONG><a name="[100]"></a>LOS_SwtmrStop</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, los_swtmr.o(i.LOS_SwtmrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = LOS_SwtmrStop &rArr; osSwtmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_callback
</UL>

<P><STRONG><a name="[101]"></a>LOS_TaskCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_agenttiny_task
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_at_recv_task
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_nb_reply_task
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_data_report_task
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_data_collection_task
</UL>

<P><STRONG><a name="[102]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, los_task.o(i.LOS_TaskCreateOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[109]"></a>LOS_TaskDelay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_report_task
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_collection_task
</UL>

<P><STRONG><a name="[10d]"></a>LOS_TaskDelete</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[10f]"></a>LOS_TaskNameGet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskNameGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_TaskNameGet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[10a]"></a>LOS_TaskYield</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
</UL>

<P><STRONG><a name="[7f]"></a>LOS_TickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sys.o(i.LOS_TickCountGet))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[ae]"></a>MX_GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[b7]"></a>MX_I2C1_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_IA1
</UL>

<P><STRONG><a name="[af]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[2b]"></a>OC_cmd_match</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nb_cmd_ioctl.o(i.OC_cmd_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OC_cmd_match &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_demo.o(i.demo_nbiot_only)
</UL>
<P><STRONG><a name="[115]"></a>QSPI_Receive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_qspi_flash.o(i.QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = QSPI_Receive &rArr; HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>

<P><STRONG><a name="[116]"></a>QSPI_Send_CMD</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, hal_qspi_flash.o(i.QSPI_Send_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_enable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>

<P><STRONG><a name="[117]"></a>QSPI_Transmit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_qspi_flash.o(i.QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QSPI_Transmit &rArr; HAL_QSPI_Transmit &rArr; HAL_QSPI_Abort &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>

<P><STRONG><a name="[7d]"></a>SHT3x_CalcRH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, e53_ia1.o(i.SHT3x_CalcRH))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_IA1_Read_Data
</UL>

<P><STRONG><a name="[7c]"></a>SHT3x_CalcTemperatureC</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, e53_ia1.o(i.SHT3x_CalcTemperatureC))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_IA1_Read_Data
</UL>

<P><STRONG><a name="[7b]"></a>SHT3x_CheckCrc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, e53_ia1.o(i.SHT3x_CheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHT3x_CheckCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_IA1_Read_Data
</UL>

<P><STRONG><a name="[76]"></a>Start_BH1750</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, e53_ia1.o(i.Start_BH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Start_BH1750 &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>

<P><STRONG><a name="[ad]"></a>SystemClock_Config</STRONG> (Thumb, 228 bytes, Stack size 232 bytes, sys_init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[19]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> los_startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a6]"></a>UART_SetConfig</STRONG> (Thumb, 1158 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[111]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_init.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_config
</UL>

<P><STRONG><a name="[11b]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[238]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c2]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_connect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_with_2_suffix
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_alloc_sock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_flash
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_flash
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_nbiot_only
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_reply_task
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_collection_task
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_log
</UL>

<P><STRONG><a name="[239]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[11]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23a]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1c0]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_set_cdpserver
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_str
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_psk
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_rcv_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close_sock
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
</UL>

<P><STRONG><a name="[23b]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[10]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[150]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_psk
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_to_hex
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_report_task
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_collection_task
</UL>

<P><STRONG><a name="[23d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[23e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11f]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23f]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[240]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[241]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[21b]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_log
</UL>

<P><STRONG><a name="[242]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[243]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[244]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13]"></a>at_cmd</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, at_main.o(i.at_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_cmd &rArr; at_cmd_multi_suffix &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[126]"></a>at_cmd_in_callback</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, at_main.o(i.at_cmd_in_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = at_cmd_in_callback &rArr; at_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listener_list_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_rcv_data
</UL>

<P><STRONG><a name="[18]"></a>at_cmd_multi_suffix</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, at_main.o(i.at_cmd_multi_suffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = at_cmd_multi_suffix &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_del
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listener_list_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>at_deinit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, at_main.o(i.at_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = at_deinit &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_deinit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init_oob
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>at_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_main.o(i.at_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_destroy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>at_get_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_main.o(i.at_get_config))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
</UL>

<P><STRONG><a name="[128]"></a>at_get_time</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_main.o(i.at_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_connect
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_with_2_suffix
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_alloc_sock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_data_ioctl
</UL>

<P><STRONG><a name="[15]"></a>at_get_unuse_linkid</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, at_main.o(i.at_get_unuse_linkid))
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>at_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, at_main.o(i.at_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = at_init &rArr; create_at_recv_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_deinit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_at_recv_task
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init_oob
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>at_init_oob</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_main.o(i.at_init_oob))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_init_oob
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[25]"></a>at_irq_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, at_hal.o(i.at_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_irq_handler &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_hal.o(i.at_usart_init)
</UL>
<P><STRONG><a name="[129]"></a>at_listener_list_add</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_main.o(i.at_listener_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[12b]"></a>at_listner_list_del</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at_main.o(i.at_listner_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_listner_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[139]"></a>at_listner_list_destroy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_main.o(i.at_listner_list_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = at_listner_list_destroy &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_deinit
</UL>

<P><STRONG><a name="[54]"></a>at_malloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_main.o(i.at_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = at_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_struct_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>at_oob_register</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, at_main.o(i.at_oob_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_oob_register &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>at_recv_task</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, at_main.o(i.at_recv_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = at_recv_task &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_resp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_cmd_matching
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_queue_wait_time
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(i.create_at_recv_task)
</UL>
<P><STRONG><a name="[1ca]"></a>at_reg_step_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_main.o(i.at_reg_step_callback))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_init
</UL>

<P><STRONG><a name="[13f]"></a>at_set_config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_main.o(i.at_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_set_config &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_init
</UL>

<P><STRONG><a name="[12e]"></a>at_struct_deinit</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, at_main.o(i.at_struct_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = at_struct_deinit &rArr; LOS_QueueDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_destroy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[135]"></a>at_struct_init</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, at_main.o(i.at_struct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = at_struct_init &rArr; LOS_QueueCreate &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
</UL>

<P><STRONG><a name="[127]"></a>at_transmit</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, at_hal.o(i.at_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_transmit &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[12d]"></a>at_usart_deinit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_hal.o(i.at_usart_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
</UL>

<P><STRONG><a name="[136]"></a>at_usart_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, at_hal.o(i.at_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = at_usart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_HwiCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_adapter
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
</UL>

<P><STRONG><a name="[14]"></a>at_write</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, at_main.o(i.at_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = at_write &rArr; write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_at_task_msg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listner_list_del
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_listener_list_add
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_main.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>atiny_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = atiny_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
</UL>

<P><STRONG><a name="[142]"></a>atiny_gettime_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atiny_osdep.o(i.atiny_gettime_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
</UL>

<P><STRONG><a name="[144]"></a>atiny_malloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atiny_osdep.o(i.atiny_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = atiny_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
</UL>

<P><STRONG><a name="[145]"></a>atiny_reboot</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_init.o(i.atiny_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atiny_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_callback
</UL>

<P><STRONG><a name="[26]"></a>atiny_task_entry</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_task.o(i.atiny_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = atiny_task_entry &rArr; demo_nbiot_only &rArr; nb_sota_demo &rArr; sota_init &rArr; sota_status_check &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_nbiot_only
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_task.o(i.creat_agenttiny_task)
</UL>
<P><STRONG><a name="[157]"></a>calc_crc32</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ota_crc.o(i.calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_enable_hwpatch
</UL>

<P><STRONG><a name="[e]"></a>calloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, malloc.o(i.calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; zalloc &rArr; malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[1bd]"></a>chartoint</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at_main.o(i.chartoint))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_connect
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_bind
</UL>

<P><STRONG><a name="[13e]"></a>cloud_cmd_matching</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, at_main.o(i.cloud_cmd_matching))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cloud_cmd_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[149]"></a>crc_check</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sota_hal.o(i.crc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crc_check &rArr; do_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_parse
</UL>

<P><STRONG><a name="[14b]"></a>creat_agenttiny_task</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, user_task.o(i.creat_agenttiny_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = creat_agenttiny_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_tasks
</UL>

<P><STRONG><a name="[14c]"></a>creat_data_collection_task</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, nb_demo.o(i.creat_data_collection_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = creat_data_collection_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_iot_entry
</UL>

<P><STRONG><a name="[14d]"></a>creat_data_report_task</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, nb_demo.o(i.creat_data_report_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = creat_data_report_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_iot_entry
</UL>

<P><STRONG><a name="[14e]"></a>creat_nb_reply_task</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, nb_demo.o(i.creat_nb_reply_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = creat_nb_reply_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_iot_entry
</UL>

<P><STRONG><a name="[137]"></a>create_at_recv_task</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, at_main.o(i.create_at_recv_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = create_at_recv_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_init
</UL>

<P><STRONG><a name="[14f]"></a>create_work_tasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_task.o(i.create_work_tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = create_work_tasks &rArr; creat_agenttiny_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_agenttiny_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>data_collection_task</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nb_demo.o(i.data_collection_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = data_collection_task &rArr; E53_IA1_Read_Data &rArr; Convert_BH1750 &rArr; Start_BH1750 &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_E53_IA1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E53_IA1_Read_Data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_demo.o(i.creat_data_collection_task)
</UL>
<P><STRONG><a name="[28]"></a>data_report_task</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nb_demo.o(i.data_report_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = data_report_task &rArr; los_nb_report &rArr; nb_send_payload &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_report
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_demo.o(i.creat_data_report_task)
</UL>
<P><STRONG><a name="[147]"></a>demo_nbiot_only</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nb_demo.o(i.demo_nbiot_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = demo_nbiot_only &rArr; nb_sota_demo &rArr; sota_init &rArr; sota_status_check &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_notify
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_iot_entry
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sota_demo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_task_entry
</UL>

<P><STRONG><a name="[14a]"></a>do_crc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sota_hal.o(i.do_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_check
</UL>

<P><STRONG><a name="[b0]"></a>dwt_delay_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwt.o(i.dwt_delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[156]"></a>flag_enable_hwpatch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, recover_image.o(i.flag_enable_hwpatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_recover_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
</UL>

<P><STRONG><a name="[219]"></a>flag_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, flag_manager.o(i.flag_init))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_init
</UL>

<P><STRONG><a name="[159]"></a>flag_read</STRONG> (Thumb, 88 bytes, Stack size 528 bytes, flag_manager.o(i.flag_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flag_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
</UL>

<P><STRONG><a name="[15a]"></a>flag_set_info</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, upgrade_flag.o(i.flag_set_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = flag_set_info &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_active_software
</UL>

<P><STRONG><a name="[158]"></a>flag_set_recover_verify</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, upgrade_flag.o(i.flag_set_recover_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_enable_hwpatch
</UL>

<P><STRONG><a name="[15c]"></a>flag_upgrade_get_result</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, upgrade_flag.o(i.flag_upgrade_get_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
</UL>

<P><STRONG><a name="[15d]"></a>flag_upgrade_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, upgrade_flag.o(i.flag_upgrade_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = flag_upgrade_init &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_init
</UL>

<P><STRONG><a name="[15e]"></a>flag_write</STRONG> (Thumb, 98 bytes, Stack size 528 bytes, flag_manager.o(i.flag_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_update_exc_process
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_reset_record_info
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flag
</UL>

<P><STRONG><a name="[15f]"></a>flash_adaptor_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_adaptor.o(i.flash_adaptor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flash_adaptor_init &rArr; hal_spi_flash_config &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_config
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_ota
</UL>

<P><STRONG><a name="[161]"></a>flash_adaptor_write</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, flash_adaptor.o(i.flash_adaptor_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = flash_adaptor_write &rArr; hal_spi_flash_erase_write &rArr; hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase_write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_malloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_flash
</UL>

<P><STRONG><a name="[22]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[f]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[165]"></a>hal_get_ota_opt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ota_port.o(i.hal_get_ota_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = hal_get_ota_opt &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sota_demo
</UL>

<P><STRONG><a name="[166]"></a>hal_init_ota</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota_port.o(i.hal_init_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hal_init_ota &rArr; flash_adaptor_init &rArr; hal_spi_flash_config &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sota_demo
</UL>

<P><STRONG><a name="[160]"></a>hal_spi_flash_config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_qspi_flash.o(i.hal_spi_flash_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hal_spi_flash_config &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_init
</UL>

<P><STRONG><a name="[167]"></a>hal_spi_flash_erase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hal_qspi_flash.o(i.hal_spi_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hal_spi_flash_erase &rArr; prv_spi_flash_erase_sector &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase_write
</UL>

<P><STRONG><a name="[162]"></a>hal_spi_flash_erase_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, hal_qspi_flash.o(i.hal_spi_flash_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hal_spi_flash_erase_write &rArr; hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
</UL>

<P><STRONG><a name="[163]"></a>hal_spi_flash_read</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, hal_qspi_flash.o(i.hal_spi_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_spi_flash_read &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_flash
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
</UL>

<P><STRONG><a name="[169]"></a>hal_spi_flash_write</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, hal_qspi_flash.o(i.hal_spi_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase_write
</UL>

<P><STRONG><a name="[152]"></a>los_nb_init</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, los_nb_api.o(i.los_nb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = los_nb_init &rArr; nb_set_cdpserver &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_set_no_encrypt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_set_cdpserver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_psk
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_reboot
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_query_ip
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_hw_detect
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_get_netstat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_check_csq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_nbiot_only
</UL>

<P><STRONG><a name="[154]"></a>los_nb_notify</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, los_nb_api.o(i.los_nb_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = los_nb_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_nbiot_only
</UL>

<P><STRONG><a name="[151]"></a>los_nb_report</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, los_nb_api.o(i.los_nb_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = los_nb_report &rArr; nb_send_payload &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_reply_task
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_report_task
</UL>

<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main &rArr; HardWare_Init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_tasks
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[175]"></a>malloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc
</UL>

<P><STRONG><a name="[1b0]"></a>mbedtls_md_finish</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[177]"></a>mbedtls_md_free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[1aa]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[1a9]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[1ab]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[1ac]"></a>mbedtls_md_setup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[1ae]"></a>mbedtls_md_starts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[1af]"></a>mbedtls_md_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, md.o(i.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[179]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bignum.o(i.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[17c]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[17d]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[180]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[17e]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[182]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(i.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[183]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[17a]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>

<P><STRONG><a name="[185]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(i.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>

<P><STRONG><a name="[18c]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1380 bytes, Stack size 1664 bytes, bignum.o(i.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[191]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 82 bytes, Stack size 1048 bytes, bignum.o(i.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[184]"></a>mbedtls_mpi_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[194]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(i.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[17b]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>

<P><STRONG><a name="[186]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[196]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(i.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[195]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[187]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(i.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[18e]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[18b]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[197]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[192]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[199]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bignum.o(i.mbedtls_mpi_read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_mpi_read_string &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[188]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[18a]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[19c]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
</UL>

<P><STRONG><a name="[17f]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[19b]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[189]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(i.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[19e]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(i.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[200]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform.o(i.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
</UL>

<P><STRONG><a name="[19f]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[1a0]"></a>mbedtls_rsa_free</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[1a1]"></a>mbedtls_rsa_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rsa.o(i.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[1a3]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, rsa.o(i.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[1a5]"></a>mbedtls_rsa_private</STRONG> (Thumb, 688 bytes, Stack size 144 bytes, rsa.o(i.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[1a7]"></a>mbedtls_rsa_public</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rsa.o(i.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[1a4]"></a>mbedtls_rsa_rsassa_pss_verify</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[1a8]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 506 bytes, Stack size 1136 bytes, rsa.o(i.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify
</UL>

<P><STRONG><a name="[1a2]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(i.mbedtls_rsa_set_padding))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[1b2]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(i.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[1b8]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(i.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
</UL>

<P><STRONG><a name="[1b6]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(i.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_check
</UL>

<P><STRONG><a name="[1b7]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_destroy
</UL>

<P><STRONG><a name="[1b3]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_reset
</UL>

<P><STRONG><a name="[1ba]"></a>mbedtls_sha256_process</STRONG> (Thumb, 3532 bytes, Stack size 312 bytes, sha256.o(i.mbedtls_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>

<P><STRONG><a name="[1b4]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(i.mbedtls_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_reset
</UL>

<P><STRONG><a name="[1b5]"></a>mbedtls_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(i.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_update
</UL>

<P><STRONG><a name="[4]"></a>nb_bind</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bc95.o(i.nb_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = nb_bind &rArr; nb_create_sock_link &rArr; nb_create_sock &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chartoint
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[171]"></a>nb_check_csq</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bc95.o(i.nb_check_csq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_check_csq
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[b]"></a>nb_close</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, bc95.o(i.nb_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = nb_close &rArr; nb_close_sock &rArr; nb_cmd_with_2_suffix &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close_sock
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>nb_cmd_data_ioctl</STRONG> (Thumb, 456 bytes, Stack size 1616 bytes, nb_cmd_ioctl.o(i.nb_cmd_data_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = nb_cmd_data_ioctl &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStrToStr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_demo.o(i.demo_nbiot_only)
</UL>
<P><STRONG><a name="[5]"></a>nb_connect</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, bc95.o(i.nb_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = nb_connect &rArr; nb_create_sock_link &rArr; nb_create_sock &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chartoint
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[1c5]"></a>nb_create_sock</STRONG> (Thumb, 202 bytes, Stack size 112 bytes, bc95.o(i.nb_create_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nb_create_sock &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_with_2_suffix
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
</UL>

<P><STRONG><a name="[1c7]"></a>nb_decompose_str</STRONG> (Thumb, 382 bytes, Stack size 112 bytes, bc95.o(i.nb_decompose_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = nb_decompose_str &rArr; nb_is_addr_valid &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chartoint
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStrToStr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sock_to_idx
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_is_addr_valid
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_handle_sock_data
</UL>

<P><STRONG><a name="[d]"></a>nb_deinit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bc95.o(i.nb_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = nb_deinit &rArr; nb_close &rArr; nb_close_sock &rArr; nb_cmd_with_2_suffix &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_reboot
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[170]"></a>nb_get_netstat</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bc95.o(i.nb_get_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_get_netstat
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[16f]"></a>nb_hw_detect</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bc95.o(i.nb_hw_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nb_hw_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[155]"></a>nb_iot_entry</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nb_demo.o(i.nb_iot_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = nb_iot_entry &rArr; creat_nb_reply_task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_nb_reply_task
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_data_report_task
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_data_collection_task
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_nbiot_only
</UL>

<P><STRONG><a name="[172]"></a>nb_query_ip</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bc95.o(i.nb_query_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_query_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[16c]"></a>nb_reboot</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bc95.o(i.nb_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nb_reboot
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_deinit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[9]"></a>nb_recv</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bc95.o(i.nb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = nb_recv &rArr; nb_recv_timeout &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>nb_recv_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bc95.o(i.nb_recv_cb))
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>nb_recv_timeout</STRONG> (Thumb, 270 bytes, Stack size 104 bytes, bc95.o(i.nb_recv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = nb_recv_timeout &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recvfrom
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>nb_recvfrom</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, bc95.o(i.nb_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = nb_recvfrom &rArr; nb_recv_timeout &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_recv_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>nb_reply_task</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nb_demo.o(i.nb_reply_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = nb_reply_task &rArr; los_nb_report &rArr; nb_send_payload &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_report
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_demo.o(i.creat_nb_reply_task)
</UL>
<P><STRONG><a name="[6]"></a>nb_send</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bc95.o(i.nb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nb_send &rArr; nb_sendto &rArr; nb_cmd_with_2_suffix &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[174]"></a>nb_send_payload</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, bc95.o(i.nb_send_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nb_send_payload &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_report
</UL>

<P><STRONG><a name="[16d]"></a>nb_send_psk</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bc95.o(i.nb_send_psk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nb_send_psk &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[53]"></a>nb_send_str</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bc95.o(i.nb_send_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = nb_send_str &rArr; sota_cmd &rArr; LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>nb_sendto</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, bc95.o(i.nb_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nb_sendto &rArr; nb_cmd_with_2_suffix &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_with_2_suffix
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>nb_set_cdpserver</STRONG> (Thumb, 272 bytes, Stack size 272 bytes, bc95.o(i.nb_set_cdpserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nb_set_cdpserver &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[16e]"></a>nb_set_no_encrypt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bc95.o(i.nb_set_no_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nb_set_no_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;los_nb_init
</UL>

<P><STRONG><a name="[153]"></a>nb_sota_demo</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, sota_demo.o(i.nb_sota_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = nb_sota_demo &rArr; sota_init &rArr; sota_status_check &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_ota
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_ota_opt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_nbiot_only
</UL>

<P><STRONG><a name="[30]"></a>nb_step</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bc95.o(i.nb_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = nb_step &rArr; nb_cmd_rcv_data &rArr; at_cmd_in_callback &rArr; at_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_rcv_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(i.nb_init)
</UL>
<P><STRONG><a name="[1ce]"></a>osAlarmHeapInfo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, los_heap.o(i.osAlarmHeapInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[1db]"></a>osAtomicBitsetClearBit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, los_slab.o(i.osAtomicBitsetClearBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[1d7]"></a>osAtomicBitsetFindClearAndSet</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, los_slab.o(i.osAtomicBitsetFindClearAndSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>

<P><STRONG><a name="[1da]"></a>osAtomicBitsetGetBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, los_slab.o(i.osAtomicBitsetGetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[1d9]"></a>osAtomicBitsetGetNumBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetGetNumBits))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[1d0]"></a>osAtomicBitsetInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, los_slab.o(i.osAtomicBitsetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osAtomicBitsetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[d0]"></a>osHeapAlloc</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, los_heap.o(i.osHeapAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[d2]"></a>osHeapAllocAlign</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, los_heap.o(i.osHeapAllocAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
</UL>

<P><STRONG><a name="[d5]"></a>osHeapFree</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, los_heap.o(i.osHeapFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osHeapFree &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[d7]"></a>osHeapInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, los_heap.o(i.osHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osHeapInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[1d1]"></a>osHeapPrvGetNext</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, los_heap.o(i.osHeapPrvGetNext))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[1cf]"></a>osHeapStatisticsGet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, los_heap.o(i.osHeapStatisticsGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osHeapStatisticsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[1]"></a>osHwiDefaultHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, los_hwi.o(i.osHwiDefaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osHwiDefaultHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> los_hwi.o(i.osHwiInit)
<LI> los_hwi.o(.data.vector)
<LI> los_hwi.o(i.LOS_HwiCreate)
</UL>
<P><STRONG><a name="[c3]"></a>osHwiInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, los_hwi.o(i.osHwiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osHwiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[21]"></a>osIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_task.o(i.osIdleTask))
<BR>[Address Reference Count : 2]<UL><LI> los_task.o(i.LOS_TaskCreateOnly)
<LI> los_task.o(i.osIdleTaskCreate)
</UL>
<P><STRONG><a name="[cb]"></a>osIdleTaskCreate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_task.o(i.osIdleTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osIdleTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[e0]"></a>osIntNumGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hwi.o(i.osIntNumGet))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInterrupt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[20]"></a>osInterrupt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_hwi.o(i.osInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_hw_tick.o(i.osTickStart)
<LI> los_hwi.o(i.LOS_HwiCreate)
</UL>
<P><STRONG><a name="[c1]"></a>osMemSystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, los_memory.o(i.osMemSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osMemSystemInit &rArr; LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[c7]"></a>osMuxInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, los_mux.o(i.osMuxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osMuxInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[10b]"></a>osPriqueueDequeue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueDequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPriqueueDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
</UL>

<P><STRONG><a name="[103]"></a>osPriqueueEnqueue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
</UL>

<P><STRONG><a name="[1d3]"></a>osPriqueueInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[110]"></a>osPriqueueSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueSize))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[f0]"></a>osPriqueueTop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueTop))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[c8]"></a>osQueueInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, los_queue.o(i.osQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osQueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[ed]"></a>osQueueOperate</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, los_queue.o(i.osQueueOperate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[104]"></a>osSchedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_hw.o(i.osSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSchedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[f3]"></a>osSemCreate</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, los_sem.o(i.osSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osSemCreate &rArr; LOS_ErrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[c6]"></a>osSemInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, los_sem.o(i.osSemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSemInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[1d6]"></a>osSlabAllocatorAlloc</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, los_slab.o(i.osSlabAllocatorAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[1d8]"></a>osSlabAllocatorFree</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, los_slab.o(i.osSlabAllocatorFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>

<P><STRONG><a name="[1dc]"></a>osSlabAllocatorNew</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, los_slab.o(i.osSlabAllocatorNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>

<P><STRONG><a name="[1de]"></a>osSlabBlockHeadFill</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabBlockHeadFill))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[1dd]"></a>osSlabCtrlHdrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_memory.o(i.osSlabCtrlHdrGet))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[cf]"></a>osSlabMemAlloc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, los_slabmem.o(i.osSlabMemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osSlabMemAlloc &rArr; osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabBlockHeadFill
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[d4]"></a>osSlabMemFree</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, los_slabmem.o(i.osSlabMemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[d8]"></a>osSlabMemInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, los_slabmem.o(i.osSlabMemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[c9]"></a>osSwTmrInit</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[ff]"></a>osSwTmrStart</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, los_swtmr.o(i.osSwTmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
</UL>

<P><STRONG><a name="[34]"></a>osSwTmrTask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osSwTmrTask &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_swtmr.o(i.osSwTmrTaskCreate)
</UL>
<P><STRONG><a name="[1df]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[1e2]"></a>osSwtmrScan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[fe]"></a>osSwtmrStop</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, los_swtmr.o(i.osSwtmrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osSwtmrStop
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
</UL>

<P><STRONG><a name="[10c]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, los_task.o(i.osTaskAdd2TimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>

<P><STRONG><a name="[38]"></a>osTaskEntry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, los_task.o(i.osTaskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = osTaskEntry &rArr; LOS_TaskDelete &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[37]"></a>osTaskExit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_hw.o(i.osTaskExit))
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[c4]"></a>osTaskInit</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, los_task.o(i.osTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osTaskInit &rArr; osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[c5]"></a>osTaskMonInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_task.o(i.osTaskMonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTaskMonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[e1]"></a>osTaskPriModify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, los_task.o(i.osTaskPriModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osTaskPriModify &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[1e4]"></a>osTaskScan</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, los_task.o(i.osTaskScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = osTaskScan &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[35]"></a>osTaskSwitchCheck</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, los_task.o(i.osTaskSwitchCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osTaskSwitchCheck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(i.osTaskMonInit)
</UL>
<P><STRONG><a name="[e2]"></a>osTaskWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, los_task.o(i.osTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[e5]"></a>osTaskWake</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_task.o(i.osTaskWake))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[36]"></a>osTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_tick.o(i.osTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw_tick.o(i.osTickStart)
</UL>
<P><STRONG><a name="[fa]"></a>osTickStart</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, los_hw_tick.o(i.osTickStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[10e]"></a>osTimerListDelete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_task.o(i.osTimerListDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>

<P><STRONG><a name="[1e5]"></a>osTimesliceCheck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, los_timeslice.o(i.osTimesliceCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = osTimesliceCheck &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[ca]"></a>osTimesliceInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_timeslice.o(i.osTimesliceInit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[108]"></a>osTskStackInit</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, los_hw.o(i.osTskStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[1e6]"></a>pack_checksum_check</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, package_checksum.o(i.pack_checksum_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_checksum_check &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
</UL>

<P><STRONG><a name="[1e9]"></a>pack_checksum_create</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, package_checksum.o(i.pack_checksum_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_checksum_create &rArr; pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
</UL>

<P><STRONG><a name="[1ec]"></a>pack_checksum_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, package_checksum.o(i.pack_checksum_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_checksum_delete &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
</UL>

<P><STRONG><a name="[1f2]"></a>pack_checksum_update_data</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, package_checksum.o(i.pack_checksum_update_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pack_checksum_update_data &rArr; pack_checksum_restore_checksum &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[1ed]"></a>pack_free</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, package.o(i.pack_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_free_save_buffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
</UL>

<P><STRONG><a name="[1f3]"></a>pack_get_device</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package.o(i.pack_get_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_software
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_set_flash_type
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_read_software
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_block_size
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_init
</UL>

<P><STRONG><a name="[1e7]"></a>pack_get_params</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package.o(i.pack_get_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_check
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_active_software
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_software
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_set_flash_type
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_read_software
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_check
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_entire_blocks
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_bin_type_tlv
</UL>

<P><STRONG><a name="[1f5]"></a>pack_head_check</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, package_head.o(i.pack_head_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_head_check &rArr; pack_checksum_check &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_check
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_is_done
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[1f7]"></a>pack_head_destroy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, package_head.o(i.pack_head_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pack_head_destroy &rArr; pack_checksum_delete &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[205]"></a>pack_head_get_checksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, package_head.o(i.pack_head_get_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[1f0]"></a>pack_head_get_head_info</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, package_head.o(i.pack_head_get_head_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_head_get_head_info
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_is_done
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
</UL>

<P><STRONG><a name="[1ef]"></a>pack_head_get_head_len</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, package_head.o(i.pack_head_get_head_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_head_get_head_len
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_is_done
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[203]"></a>pack_head_get_key</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, package_head.o(i.pack_head_get_key))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
</UL>

<P><STRONG><a name="[1f8]"></a>pack_head_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package_head.o(i.pack_head_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_head_init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
</UL>

<P><STRONG><a name="[1f9]"></a>pack_head_parse</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, package_head.o(i.pack_head_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pack_head_parse &rArr; pack_head_parse_tlvs &rArr; pack_checksum_create &rArr; pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[1fa]"></a>pack_head_parse_head_len</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, package_head.o(i.pack_head_parse_head_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pack_head_parse_head_len &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
</UL>

<P><STRONG><a name="[1fe]"></a>pack_head_set_head_info</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, package_head.o(i.pack_head_set_head_info))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
</UL>

<P><STRONG><a name="[1fd]"></a>pack_init_device</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, package.o(i.pack_init_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_init_device &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_set_device
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_set_head_info
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_init
</UL>

<P><STRONG><a name="[16b]"></a>pack_malloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, package.o(i.pack_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_calloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_head_len
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_handle_checksum_tlv
</UL>

<P><STRONG><a name="[202]"></a>pack_sha256_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, package_checksum.o(i.pack_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pack_sha256_init &rArr; pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_init
</UL>

<P><STRONG><a name="[1ee]"></a>pack_sha256_rsa2048_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, package_checksum.o(i.pack_sha256_rsa2048_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_sha256_rsa2048_init &rArr; pack_sha256_init &rArr; pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init
</UL>

<P><STRONG><a name="[40]"></a>pack_storage_active_software</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, package.o(i.pack_storage_active_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = pack_storage_active_software &rArr; flag_set_info &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_pack_device)
</UL>
<P><STRONG><a name="[20a]"></a>pack_wr_check</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, package_writer.o(i.pack_wr_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pack_wr_check &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[207]"></a>pack_wr_destroy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_wr_destroy &rArr; pack_wr_free_save_buffer &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_free_save_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[20b]"></a>pack_wr_free_save_buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_free_save_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_wr_free_save_buffer &rArr; pack_free &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_destroy
</UL>

<P><STRONG><a name="[201]"></a>pack_wr_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_pack_device
</UL>

<P><STRONG><a name="[1ff]"></a>pack_wr_set_device</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, package_writer.o(i.pack_wr_set_device))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
</UL>

<P><STRONG><a name="[204]"></a>pack_wr_write</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, package_writer.o(i.pack_wr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = pack_wr_write &rArr; pack_wr_entire_blocks &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_check
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_entire_blocks
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_end_not_aligned_block
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software
</UL>

<P><STRONG><a name="[206]"></a>pack_wr_write_end</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, package_writer.o(i.pack_wr_write_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = pack_wr_write_end &rArr; pack_wr_write_stored_data &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_storage_write_software_end
</UL>

<P><STRONG><a name="[20e]"></a>pack_wr_write_stored_data</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, package_writer.o(i.pack_wr_write_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pack_wr_write_stored_data &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_end
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[168]"></a>prv_spi_flash_erase_sector</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_qspi_flash.o(i.prv_spi_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prv_spi_flash_erase_sector &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_enable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_erase
</UL>

<P><STRONG><a name="[13d]"></a>read_resp</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, at_hal.o(i.read_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_resp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[52]"></a>read_ver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sota_demo.o(i.read_ver))
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>sota_callback</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sota_demo.o(i.sota_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = sota_callback &rArr; sota_process &rArr; sota_new_ver_process &rArr; sota_reset_record_info &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_reboot
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(i.nb_sota_demo)
</UL>
<P><STRONG><a name="[1cb]"></a>sota_cmd</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bc95.o(i.sota_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sota_cmd &rArr; LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_transmit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send_str
</UL>

<P><STRONG><a name="[32]"></a>sota_cmd_match</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sota_demo.o(i.sota_cmd_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sota_cmd_match &rArr; sota_parse &rArr; crc_check &rArr; do_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_parse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(i.nb_sota_demo)
</UL>
<P><STRONG><a name="[1cd]"></a>sota_init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, sota.o(i.sota_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sota_init &rArr; sota_status_check &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_init_device
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sota_demo
</UL>

<P><STRONG><a name="[56]"></a>sota_log</STRONG> (Thumb, 68 bytes, Stack size 288 bytes, sota_demo.o(i.sota_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sota_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>sota_parse</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, sota.o(i.sota_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sota_parse &rArr; crc_check &rArr; do_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_check
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStrToByte
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chartoint
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_cmd_match
</UL>

<P><STRONG><a name="[214]"></a>sota_process</STRONG> (Thumb, 230 bytes, Stack size 120 bytes, sota.o(i.sota_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sota_process &rArr; sota_new_ver_process &rArr; sota_reset_record_info &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_to_hex
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_update_exc_process
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_new_ver_process
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_data_block_process
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_callback
</UL>

<P><STRONG><a name="[31]"></a>sota_timeout_handler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sota.o(i.sota_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sota_timeout_handler &rArr; sota_send_request_block &rArr; sota_at_send &rArr; ver_to_hex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_response_code
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota_demo.o(i.nb_sota_demo)
</UL>
<P><STRONG><a name="[134]"></a>store_resp_buf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, at_main.o(i.store_resp_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = store_resp_buf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
</UL>

<P><STRONG><a name="[1cc]"></a>str_to_hex</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bc95.o(i.str_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = str_to_hex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
</UL>

<P><STRONG><a name="[12c]"></a>write_at_task_msg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at_hal.o(i.write_at_task_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = write_at_task_msg &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_multi_suffix
</UL>

<P><STRONG><a name="[148]"></a>zalloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = zalloc &rArr; malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[140]"></a>at_usart_adapter</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, at_hal.o(i.at_usart_adapter))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_usart_init
</UL>

<P><STRONG><a name="[164]"></a>hal_check_flash_param</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ota_port.o(i.hal_check_flash_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = hal_check_flash_param &rArr; atiny_gettime_ms &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_write_flash
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_flash
</UL>

<P><STRONG><a name="[2d]"></a>hal_read_flash</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ota_port.o(i.hal_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hal_read_flash &rArr; hal_spi_flash_read &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(i.hal_get_ota_opt)
</UL>
<P><STRONG><a name="[2e]"></a>hal_write_flash</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ota_port.o(i.hal_write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hal_write_flash &rArr; flash_adaptor_write &rArr; hal_spi_flash_erase_write &rArr; hal_spi_flash_write &rArr; prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_flash_param
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_adaptor_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_port.o(i.hal_get_ota_opt)
</UL>
<P><STRONG><a name="[1bc]"></a>nb_alloc_sock</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bc95.o(i.nb_alloc_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nb_alloc_sock &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
</UL>

<P><STRONG><a name="[1bf]"></a>nb_close_sock</STRONG> (Thumb, 46 bytes, Stack size 88 bytes, bc95.o(i.nb_close_sock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nb_close_sock &rArr; nb_cmd_with_2_suffix &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_cmd_with_2_suffix
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock_link
</UL>

<P><STRONG><a name="[1c3]"></a>nb_cmd_rcv_data</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, bc95.o(i.nb_cmd_rcv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = nb_cmd_rcv_data &rArr; at_cmd_in_callback &rArr; at_malloc &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_in_callback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_step
</UL>

<P><STRONG><a name="[1c1]"></a>nb_cmd_with_2_suffix</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, bc95.o(i.nb_cmd_with_2_suffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nb_cmd_with_2_suffix &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_sendto
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close_sock
</UL>

<P><STRONG><a name="[1be]"></a>nb_create_sock_link</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bc95.o(i.nb_create_sock_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = nb_create_sock_link &rArr; nb_create_sock &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_close_sock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_alloc_sock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_connect
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_bind
</UL>

<P><STRONG><a name="[2f]"></a>nb_handle_sock_data</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bc95.o(i.nb_handle_sock_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = nb_handle_sock_data &rArr; nb_decompose_str &rArr; nb_is_addr_valid &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(i.nb_cmd_rcv_data)
</UL>
<P><STRONG><a name="[3]"></a>nb_init</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, bc95.o(i.nb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nb_init &rArr; at_set_config &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reg_step_callback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95.o(.data)
</UL>
<P><STRONG><a name="[1c8]"></a>nb_is_addr_valid</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bc95.o(i.nb_is_addr_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nb_is_addr_valid &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
</UL>

<P><STRONG><a name="[1c9]"></a>nb_sock_to_idx</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bc95.o(i.nb_sock_to_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nb_sock_to_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decompose_str
</UL>

<P><STRONG><a name="[1c6]"></a>strnstr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bc95.o(i.strnstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strnstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_create_sock
</UL>

<P><STRONG><a name="[1d2]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>

<P><STRONG><a name="[1e0]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTimeoutHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[1e1]"></a>osSwtmrDelete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[cd]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[106]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[107]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[1e3]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[cc]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_task.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
</UL>

<P><STRONG><a name="[de]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[da]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[db]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[ea]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>

<P><STRONG><a name="[e7]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[e8]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>

<P><STRONG><a name="[1d4]"></a>osQueueBufferOperate</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, los_queue.o(i.osQueueBufferOperate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osQueueBufferOperate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[ec]"></a>osQueueReadParameterCheck</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, los_queue.o(i.osQueueReadParameterCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osQueueReadParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[ef]"></a>osQueueWriteParameterCheck</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, los_queue.o(i.osQueueWriteParameterCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osQueueWriteParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>

<P><STRONG><a name="[f6]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
</UL>

<P><STRONG><a name="[f5]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[1d5]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[c0]"></a>osRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_init.o(i.osRegister))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[b4]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[b3]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[83]"></a>I2C_TransferConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[82]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[84]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[85]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[86]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[a3]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[9b]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLLSAI1_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[9c]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLLSAI2_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[8e]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[8f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[94]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32l4xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[92]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l4xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
</UL>

<P><STRONG><a name="[210]"></a>prv_spi_flash_wait_write_end</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_qspi_flash.o(i.prv_spi_flash_wait_write_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>

<P><STRONG><a name="[20f]"></a>prv_spi_flash_write_enable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_qspi_flash.o(i.prv_spi_flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prv_spi_flash_write_enable &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_erase_sector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_page
</UL>

<P><STRONG><a name="[16a]"></a>prv_spi_flash_write_page</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, hal_qspi_flash.o(i.prv_spi_flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prv_spi_flash_write_page &rArr; prv_spi_flash_wait_write_end &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_write_enable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_spi_flash_wait_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_flash_write
</UL>

<P><STRONG><a name="[181]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(i.mbedtls_clz))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[176]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(i.mbedtls_int_div_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[193]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bignum.o(i.mbedtls_mpi_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[19a]"></a>mpi_get_digit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bignum.o(i.mpi_get_digit))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[18d]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(i.mpi_montg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[18f]"></a>mpi_montmul</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[190]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[198]"></a>mpi_mul_hlp</STRONG> (Thumb, 1584 bytes, Stack size 32 bytes, bignum.o(i.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[19d]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[178]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[4e]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>sha224_ctx_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha224_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(i.sha256_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(i.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rsa.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[1ad]"></a>mgf_mask</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, rsa.o(i.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mgf_mask &rArr; mbedtls_md_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[1a6]"></a>rsa_prepare_blinding</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rsa.o(i.rsa_prepare_blinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1b9]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha256.o(i.mbedtls_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[143]"></a>osKernelGetTickCount</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atiny_osdep.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atiny_gettime_ms
</UL>

<P><STRONG><a name="[130]"></a>at_get_queue_wait_time</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at_main.o(i.at_get_queue_wait_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = at_get_queue_wait_time &rArr; LOS_MuxPend &rArr; osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[131]"></a>at_handle_callback_cmd_resp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_main.o(i.at_handle_callback_cmd_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = at_handle_callback_cmd_resp &rArr; at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_resp
</UL>

<P><STRONG><a name="[133]"></a>at_handle_resp</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, at_main.o(i.at_handle_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = at_handle_resp &rArr; at_handle_callback_cmd_resp &rArr; at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_resp_buf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_callback_cmd_resp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[132]"></a>at_rm_node</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_main.o(i.at_rm_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_timeout_nodes
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_handle_callback_cmd_resp
</UL>

<P><STRONG><a name="[13c]"></a>at_rm_timeout_nodes</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, at_main.o(i.at_rm_timeout_nodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = at_rm_timeout_nodes &rArr; at_rm_node &rArr; at_free &rArr; LOS_MemFree &rArr; osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_time
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rm_node
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_task
</UL>

<P><STRONG><a name="[15b]"></a>save_flag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, upgrade_flag.o(i.save_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_get_result
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_recover_verify
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set_info
</UL>

<P><STRONG><a name="[21f]"></a>chartoint</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sota.o(i.chartoint))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_parse
</UL>

<P><STRONG><a name="[46]"></a>func_flag_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sota.o(i.func_flag_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = func_flag_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota.o(i.sota_init)
</UL>
<P><STRONG><a name="[47]"></a>func_flag_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sota.o(i.func_flag_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = func_flag_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sota.o(i.sota_init)
</UL>
<P><STRONG><a name="[211]"></a>sota_at_send</STRONG> (Thumb, 216 bytes, Stack size 392 bytes, sota.o(i.sota_at_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sota_at_send &rArr; ver_to_hex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_check
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStrToByte
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_to_hex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_response_code
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_process
</UL>

<P><STRONG><a name="[216]"></a>sota_data_block_process</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, sota.o(i.sota_data_block_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = sota_data_block_process &rArr; sota_send_request_block &rArr; sota_at_send &rArr; ver_to_hex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_response_code
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_process
</UL>

<P><STRONG><a name="[21c]"></a>sota_new_ver_process</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, sota.o(i.sota_new_ver_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = sota_new_ver_process &rArr; sota_reset_record_info &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_response_code
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_reset_record_info
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_process
</UL>

<P><STRONG><a name="[21e]"></a>sota_reset_record_info</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sota.o(i.sota_reset_record_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sota_reset_record_info &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_new_ver_process
</UL>

<P><STRONG><a name="[218]"></a>sota_send_request_block</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, sota.o(i.sota_send_request_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = sota_send_request_block &rArr; sota_at_send &rArr; ver_to_hex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_to_hex
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_new_ver_process
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_data_block_process
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_timeout_handler
</UL>

<P><STRONG><a name="[217]"></a>sota_send_response_code</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sota.o(i.sota_send_response_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sota_send_response_code &rArr; sota_at_send &rArr; ver_to_hex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_to_hex
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_update_exc_process
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_new_ver_process
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_data_block_process
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_timeout_handler
</UL>

<P><STRONG><a name="[21a]"></a>sota_status_check</STRONG> (Thumb, 270 bytes, Stack size 104 bytes, sota.o(i.sota_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = sota_status_check &rArr; flag_upgrade_get_result &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver_to_hex
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_upgrade_get_result
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_init
</UL>

<P><STRONG><a name="[220]"></a>sota_update_exc_process</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sota.o(i.sota_update_exc_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = sota_update_exc_process &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_response_code
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_write
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_process
</UL>

<P><STRONG><a name="[212]"></a>ver_to_hex</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sota.o(i.ver_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ver_to_hex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_status_check
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_response_code
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_send_request_block
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_at_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sota_process
</UL>

<P><STRONG><a name="[3d]"></a>local_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, package.o(i.local_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = local_calloc &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[3c]"></a>pack_get_block_size</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, package.o(i.pack_get_block_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pack_get_block_size &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[1f4]"></a>pack_init_pack_device</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, package.o(i.pack_init_pack_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>

<P><STRONG><a name="[39]"></a>pack_read_software</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, package.o(i.pack_read_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_read_software &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[3b]"></a>pack_set_flash_type</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, package.o(i.pack_set_flash_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_set_flash_type &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[3e]"></a>pack_storage_write_software</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, package.o(i.pack_storage_write_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = pack_storage_write_software &rArr; pack_wr_write &rArr; pack_wr_entire_blocks &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_checksum
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_pack_device)
</UL>
<P><STRONG><a name="[3f]"></a>pack_storage_write_software_end</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, package.o(i.pack_storage_write_software_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = pack_storage_write_software_end &rArr; pack_wr_write_end &rArr; pack_wr_write_stored_data &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_end
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_destroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_destroy
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_pack_device)
</UL>
<P><STRONG><a name="[3a]"></a>pack_write_software</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, package.o(i.pack_write_software))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_write_software &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package.o(i.pack_init_device)
</UL>
<P><STRONG><a name="[1e8]"></a>pack_checksum_get_alg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, package_checksum.o(i.pack_checksum_get_alg))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_restore_checksum
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_init_head_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
</UL>

<P><STRONG><a name="[1ea]"></a>pack_checksum_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, package_checksum.o(i.pack_checksum_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_checksum_init &rArr; pack_sha256_rsa2048_init &rArr; pack_sha256_init &rArr; pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_rsa2048_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
</UL>

<P><STRONG><a name="[1eb]"></a>pack_checksum_init_head_data</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, package_checksum.o(i.pack_checksum_init_head_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_info
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
</UL>

<P><STRONG><a name="[1f1]"></a>pack_checksum_restore_checksum</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, package_checksum.o(i.pack_checksum_restore_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pack_checksum_restore_checksum &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_get_alg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_update_data
</UL>

<P><STRONG><a name="[43]"></a>pack_sha256_check</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, package_checksum.o(i.pack_sha256_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pack_sha256_check &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[44]"></a>pack_sha256_destroy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, package_checksum.o(i.pack_sha256_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pack_sha256_destroy &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[41]"></a>pack_sha256_reset</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, package_checksum.o(i.pack_sha256_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pack_sha256_reset &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[45]"></a>pack_sha256_rsa2048_check</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, package_checksum.o(i.pack_sha256_rsa2048_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = pack_sha256_rsa2048_check &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_key
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_rsa2048_init)
</UL>
<P><STRONG><a name="[42]"></a>pack_sha256_update</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, package_checksum.o(i.pack_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pack_sha256_update &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_checksum.o(i.pack_sha256_init)
</UL>
<P><STRONG><a name="[1fc]"></a>pack_head_get_checksum_attribute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, package_head.o(i.pack_head_get_checksum_attribute))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse_tlvs
</UL>

<P><STRONG><a name="[58]"></a>pack_head_handle_bin_type_tlv</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, package_head.o(i.pack_head_handle_bin_type_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack_head_handle_bin_type_tlv &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_head.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>pack_head_handle_checksum_tlv</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, package_head.o(i.pack_head_handle_checksum_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pack_head_handle_checksum_tlv &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_free
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> package_head.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>pack_head_is_done</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, package_head.o(i.pack_head_is_done))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_info
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_head_len
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_check
</UL>

<P><STRONG><a name="[1fb]"></a>pack_head_parse_tlvs</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, package_head.o(i.pack_head_parse_tlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pack_head_parse_tlvs &rArr; pack_checksum_create &rArr; pack_checksum_init_head_data &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_delete
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_checksum_create
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_get_checksum_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_head_parse
</UL>

<P><STRONG><a name="[208]"></a>pack_wr_begin_not_aligned</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, package_writer.o(i.pack_wr_begin_not_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pack_wr_begin_not_aligned &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[20c]"></a>pack_wr_end_not_aligned_block</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, package_writer.o(i.pack_wr_end_not_aligned_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_wr_end_not_aligned_block &rArr; pack_malloc &rArr; pack_get_params &rArr; pack_get_device &rArr; pack_init_pack_device &rArr; pack_wr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[20d]"></a>pack_wr_entire_blocks</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, package_writer.o(i.pack_wr_entire_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pack_wr_entire_blocks &rArr; pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_get_params
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write
</UL>

<P><STRONG><a name="[209]"></a>pack_write_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, package_writer.o(i.pack_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = pack_write_data &rArr; flag_enable_hwpatch &rArr; flag_set_recover_verify &rArr; save_flag &rArr; flag_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_enable_hwpatch
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_write_stored_data
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_entire_blocks
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_wr_begin_not_aligned
</UL>

<P><STRONG><a name="[120]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[123]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[122]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[24]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[1e]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
